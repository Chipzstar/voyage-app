// -------------------------------------
// WARNING
// THIS FILE IS AUTOGENERATED BY PRISMERGE
// DO NOT MANUALLY EDIT THIS FILE!
// -------------------------------------

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  firstname     String?
  lastname      String?
  password      String /// @encrypted
  location      Location[]
  carrierId     Carrier?
  shipperId     Shipper?
  drivers       Driver[]
  members       Member[]
  vehicles      Vehicle[]
  customers     Customer[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
type Stripe {
  customerId      String
  paymentMethodId String
}

type Address {
  addressLine1 String
  addressLine2 String?
  city         String
  region       String?
  postcode     String
  country      String
}

type TimeWindow {
  start Int
  end   Int
}

type Dimensions {
  length Int
  width  Int
  height Int
}

type Pickup {
  facilityId   String
  facilityName String
  location     String
  window       TimeWindow
}

type Delivery {
  facilityId   String
  facilityName String
  location     String
  window       TimeWindow?
}

type Package {
  weight      Int
  quantity    Int
  dimensions  Dimensions
  packageType PACKAGE_TYPE
  description String
}

type CarrierInfo {
  name        String
  driverName  String
  driverPhone String
  location    Float[]
  vehicle     String?
}

type LocationTimeWindow {
  h Int
  m Int
}

type OperatingProps {
  isActive Boolean
  open     LocationTimeWindow
  close    LocationTimeWindow
}

type OperatingHoursState {
  facility OperatingProps
}

type Contact {
  name  String
  email String
  phone String
  notes String?
}
enum LocationType {
  WAREHOUSE
  STORE
  LASTMILE_CARRIER
}

model Location {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  locationId           String                @unique
  user                 User                  @relation(fields: [userId], references: [id])
  userId               String                @db.ObjectId
  name                 String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  type                 LocationType
  addressLine1         String
  addressLine2         String?
  city                 String
  postcode             String
  region               String
  country              String
  pickupInstructions   String?
  deliveryInstructions String?
  operatingHours       OperatingHoursState[]
}
enum STATUS {
  NEW
  PENDING
  DISPATCHED
  EN_ROUTE
  COMPLETED
  CANCELLED
}

enum SERVICE_TYPE {
  W2W
  D2S
  D2C
}

enum SHIPMENT_TYPE {
  FTL
  LTL
  LPS
}

enum SCHEDULING_TYPE {
  ONE_TIME
  RECURRING
}

enum SHIPMENT_ACTIVITY {
  NO_PREFERENCE
  TAIL_LIFT
  JUMBO_TRAILER
  FLATBED_TRAILER
}

enum PACKAGE_TYPE {
  PALLET
  CRATE
  BOX
  CONTAINER
  SKIDS
}

model Shipment {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  shipmentId         String              @unique
  shipper            Shipper             @relation(fields: [shipperId], references: [id])
  shipperId          String              @db.ObjectId
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  bookingStatus      String              @default("Booked")
  status             STATUS
  serviceType        SERVICE_TYPE
  schedulingType     SCHEDULING_TYPE
  activitiesRequired SHIPMENT_ACTIVITY[]
  internalPONumber   String?             @default("")
  customerPONumber   String?             @default("")
  rate               Int
  pickup             Pickup
  delivery           Delivery
  package            Package
  carrierInfo        CarrierInfo?
}
model Shipper {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  shipperId String     @unique
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  fullName  String
  firstname String
  lastname  String
  company   String
  address   Address
  email     String
  phone     String
  stripe    Stripe?
  shipment  Shipment[]
}
model Carrier {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  carrierId String     @unique
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  fullName  String
  firstname String
  lastname  String
  company   String
  address   Address
  email     String
  phone     String
  stripe    Stripe?
  loads     Load[]
  drivers   Driver[]
  members   Member[]
  vehicles  Vehicle[]
  customers Customer[]
}
enum AccountType {
  SMALL_SHIPPER
  MEDIUM_SHIPPER
  LARGE_SHIPPER
}

model Customer {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId
  carrier       Carrier     @relation(fields: [carrierId], references: [id])
  carrierId     String      @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  customerId    String
  accountType   AccountType
  companyName   String
  fullName      String
  firstname     String?
  lastname      String?
  email         String
  phone         String
  billingEmail  String
  addressLine1  String
  addressLine2  String?
  city          String
  region        String?
  postcode      String
  country       String
  taxIDNumber   String?
  extraContacts Contact[]
  notes         String?
}
enum DriverStatus {
  OFFLINE
  AVALIABLE
  BUSY
  UNVERIFIED
}

model Driver {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  carrier        Carrier      @relation(fields: [carrierId], references: [id])
  carrierId      String       @db.ObjectId
  driverId       String
  vehicleId      String?
  fullName       String
  firstName      String
  lastName       String
  email          String
  dob            Int?
  defaultPhone   String
  primaryPhone   String
  secondaryPhone String?
  companyName    String
  hireDate       Int?
  isActive       Boolean
  addressLine1   String
  addressLine2   String?
  city           String
  region         String?
  postcode       String
  fleetId        String?
  notes          String?
  status         DriverStatus
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
model Load {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  shipmentId         String              @unique
  carrier            Carrier             @relation(fields: [carrierId], references: [id])
  carrierId          String              @db.ObjectId
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  bookingStatus      String              @default("Booked")
  status             STATUS
  serviceType        SERVICE_TYPE
  schedulingType     SCHEDULING_TYPE
  activitiesRequired SHIPMENT_ACTIVITY[]
  internalPONumber   String?             @default("")
  customerPONumber   String?             @default("")
  rate               Int
  pickup             Pickup
  delivery           Delivery
  package            Package
  carrierInfo        CarrierInfo?
}
enum TeamRole {
  ADMIN
  CONTROLLER
  SECRETARY
  FLEET_MANAGER
  COORDINATOR
}

model Member {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  carrier   Carrier  @relation(fields: [carrierId], references: [id])
  carrierId String   @db.ObjectId
  memberId  String
  fullName  String
  firstname String
  lastname  String
  email     String
  phone     String
  role      TeamRole
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum VehicleStatus {
  IDLE
  OCCUPIED
  ON_THE_ROAD
  FULL_CAPACITY
}

enum VehicleType {
  DRY_VAN
  TAIL_LIFT
  JUMBO_TRAILER
  FLATBED_TRAILER
  STEP_DECK_TRAILER
  ARCTIC_TRUCK
  OTHER
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
  ALTERNATIVE
}

enum FuelMeasurementUnit {
  LITRE
  GALLON
}

model Vehicle {
  id                  String              @id @default(auto()) @map("_id") @db.ObjectId
  user                User                @relation(fields: [userId], references: [id])
  userId              String              @db.ObjectId
  carrier             Carrier             @relation(fields: [carrierId], references: [id])
  carrierId           String              @db.ObjectId
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  vehicleId           String
  currentDriver       String
  vehicleType         VehicleType
  vehicleName         String
  regNumber           String
  vin                 String
  engineNumber        String
  yearOfManufacture   String
  colour              String
  fuelType            FuelType
  fuelMeasurementUnit FuelMeasurementUnit
  image               String?
  dimensions          Dimensions
  make                String
  model               String
  notes               String?
  status              VehicleStatus
}
